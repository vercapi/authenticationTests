
#+TITLE Tests for single sign on authentication

* Weblogic and OAuth

  Weblogic doesn't provide a OAuth authentication provider out of the box. This means we need to create a custom implementation.

  Described below is the end goal.
  We want to request an OAuth token that gives authorization for giving a session ID to a Resource Owner (end user)
  These are the steps that should be followed in case of an ADF Application deployed on WLS.

  1. weblogic.host:7101/myApp/ -> Try and access the application 
     - [X] This happens standard
  2. weblogic.host:7101/adfAuthentication -> Redirect to the authentication servlet
     - [ ] !!HOW?? Make adfAuthentication do the redirect 
  3. oauth.host/f5-oauth2/v1/authorize -> Redirect to login page of th OAuth2 provider
     - [ ] Configure OAuth server to authenticate and redirect with token as parameter
  4. User logs in, is redirect to the URL below
  5. weblogic.host:7101/oauth2?token=qhfqus4fhkj6sdfhi2l3zeur -> token is validated and user gets sessionid
     - [ ] Create Service end point that accepts the token passes it to the WLS Authentication process
     - [ ] Create Authentication Provider that can varify the OAuth Token
  6. weblogic.host:7101/myApp -> User is logged in into his application


  Additional remarks
  - If user session is still OK with OAuth provider, don't login immediately continue.

** TODO Create simple Authentication Provider
   
   [[https://docs.oracle.com/middleware/1221/wls/DEVSP/toc.htm][Official Documentation]]
   [[https://medium.com/@pubudu2013101/custom-authentication-provider-in-web-logic-12c-5e6ca4667149][Example Implementation]], this seems to just use samples not real OAuth2 authentication
   [[http://www.oracle.com/technetwork/indexes/samplecode/weblogic-sample-522121.html][DB User Athentication Provider example]] Example from oracle (dbuserprovider.zip).
  
*** Setup project

    Initiate maven repository
    #+BEGIN_SRC sh
      mvn archetype:generate  -DarchetypeGroupId=org.apache.maven.archetypes  -DgroupId=be.vercapi.ouath2provider  -DartifactId=OAuthProvider -Dversion=0.1-SNAPSHOT
    #+END_SRC

** TODO Create end point that can Accept OAuth token
   
*** TODO Simple proof of concept

    Create an endpoint that can log a user in within ADF.

    Generate maven project
    #+BEGIN_SRC sh
      mvn archetype:generate -DarchetypeGroupId=com.oracle.weblogic.archetype -DarchetypeArtifactId=basic-webapp -DarchetypeVersion=12.2.1-0-0 -DgroupId=be.vercapi.OAuthEndpoint -DartifactId=OAuthEndpoint -Dversion=0.1-SNAPSHOT 
    #+END_SRC
    
** TODO Autentication Provider needs to authenticate with a OAuth token

   The Authentication Provider needs to use the Authorization Code Grant. [[https://tools.ietf.org/html/rfc6749#section-4.2][RFC 6749, 4.1]]

** TODO POC Within ADF Application

   ADF Application in ./ADFOAuthTest
   
*** TODO Make logging in possible via servlet
    
**** DONE Ensure login via servlet

     The goal is to make the following URL show 'Hello <username>'
     #+BEGIN_SRC restclient
     GET http://127.0.0.1:7101/ADFOAuthTest-ViewController-context-root/faces/OAuth?token=correct
     #+END_SRC
 
     The most important piece of the code is in file
     #+BEGIN_SRC java
       Subject subject = Authentication.login(new URLCallbackHandler("weblogic", "weblogic1"));
       ServletAuthentication.runAs(subject, req);
     #+END_SRC
     [ADFOAuthTest/ViewController/src/be/vercapi/adfoauth/view/OAuthEndPointServlet.java]
     The snippet above calls the WLS framework to log the user in. ADF Uses this to provides it's own security.
     This will always login the weblogic user, but proves the concep works

     Test cases
     - [X] Check that username can be retreived via securityContext.
     - [X] Check that with ADF Security on we can still access the page.
     

     Check this version out
     #+BEGIN_SRC sh
     git checkout 0f879e94ee185106809ca52f2abeeca31f3df0c9
     #+END_SRC

**** DONE Ensure automatic redirection

     Create a system that can redirect to the OAuth server
     
     #+BEGIN_SRC xml
        <login-config>
          <auth-method>FORM</auth-method>
          <realm-name>jazn.com</realm-name>
          <form-login-config>
            <form-login-page>/login</form-login-page>
            <form-error-page>/error</form-error-page>
          </form-login-config>
        </login-config>
     #+END_SRC

     Form login can hold a reference to a page or a servlet.
     form-login-page can also hold format like '/../login/faces/login'. So we can also redirect to servlets of other deployments.

     In the example the redirect automaically calls the OAuth servlet thus logging in autom.
      
**** DONE Deploy as seperate application
     
     The JEE Appliation at ./OAuthEndpoint can be used to login. The following URL can be used to login for the ADF applications.
     #+BEGIN_SRC restclient
     http://192.168.74.95:7101/OAuthEndPoint/OAuth?token=correct
     #+END_SRC
     
**** TODO Implement Accept OAuth token

     A custom Callbackhandler is used. TokenCallbackhandler is defined in OAuthProvider project.
     So we need to install that in our local maven repo.
     #+BEGIN_SRC sh :dir OAuth2Provider
     mvn install:install-file -Dfile=target/OAuthProvider-0.1-SNAPSHOT.jar -DgroupId=be.vercapi.oauth2provider -DartifactId=OAuth2Provider -Dversion=0.1-SNAPSHOT -Dpackaging=jar -DgeneratePom=true
     #+END_SRC
     
     - [ ] Actually pass token/grant to authentication provider
     - [ ] Send random number that returns with the callback so we ensure this is the correct request

*** TODO Create a authentication provider that can get a token and validate it

    In a first attempt a custom authentication provider was created following steps in the [[https://docs.oracle.com/cd/E12839_01/web.1111/e13718/atn.htm#DEVSP222][documentation]]. 
    This attempt was hinted by this [[https://medium.com/@pubudu2013101/custom-authentication-provider-in-web-logic-12c-5e6ca4667149][article]]
    This worked when supplying a surename password via a URLCallbackhandler as shown in the example.
    
    Code from the login servlet
    #+BEGIN_SRC java 
      Subject vSubject = Authentication.login(new URLCallbackHandler(vUsername, vPassword));
      weblogic.servlet.security.ServletAuthentication.runAs(vSubject, vHttpServletRequest);
    #+END_SRC

    In addition with a custom CallbackHanler and callbackType this no longer worked.

    New code in login servlet
    #+BEGIN_SRC java
      Subject subject = Authentication.login(new TokenCallbackhandler(vToken));
      weblogic.servlet.security.ServletAuthentication.runAs(subject, req);
    #+END_SRC

    I expected the callback supplied by the init function in the LoginModule to be TokenCallbackhandler but actually was javax.security.auth.login.LoginContext.SecureCallbackHandler
    #+BEGIN_SRC java
      public void initialize(Subject pSubject, CallbackHandler pCallbackHandler, Map pSharedState, Map pOptions)
    #+END_SRC

    So when we call the handle on the callbackhandler we don't directly invoke our custom TokenCallbackhandler but a Callbackhandler from Weblogic.
    #+BEGIN_SRC java
      Callback[] callbacks;
      callbacks = new Callback[1];
      callbacks[0] = new TokenTypeCallback();

      callbackHandler.handle(callbacks);
    #+END_SRC
    This callback handler throws an error when you don't supply a username and password. It seems this isn't the correct approach.

    After inspecting the documentation for weblogic.security.services.Authentication to try and see what actually happens to the CallbackHandler with the login method.
    I found this.
    #+BEGIN_SRC java
      public static Subject Authentication.assertIdentity(String tokenType, Object token) throws LoginException
    #+END_SRC
    This seems much closer to what we actually need.

    For this to work we need a custom Identity Assertion Provider, a specific form of Authentication Provider. 
    So a second attempt started following the [[https://docs.oracle.com/cd/E12839_01/web.1111/e13718/ia.htm#DEVSP244][documentation]].
    
    The documentation suggests that for a SSO situation an Identity Assertion is a better fit:
    Unlike in a simple authentication situation (described in The Authentication Process), the LoginModules that Identity Assertion providers use do not verify proof 
    material such as usernames and passwords; they simply verify that the user exists.
    
    

    Test cases:
    - [ ] Validate based on 1 argument, that should become.
    - [ ] Assign roles any roles should enable access to ADF Secured resources accessible only to specific groups.
 
*** TODO Enable login system with actual OAuth system

    What grant type will we use here?
    
*** TODO Deployment on cluster

    This will need to be deployed on a cluster. There we will test following cases:
    - [ ] Check login works for all deployed applications.
    - [ ] Check login works over cluster.
    - [ ] This application should be deployed as a sepparate application

* APIGEE and  SAML

  [[https://tools.ietf.org/html/rfc7522][RFC 7522]] Describes a way to use a SAML Assertion for requesting a OAuth2 token.

  Basically SAML is used to authenticate OAuth2 to authorize. This also ensures that existing SAML services can still be used.
  This [[https://www.slideshare.net/apigee/managing-identities-in-the-world-of-apis][presentation]] gives a high level example.

  APIGEE Seems able to work with SAML as show [[https://apigee.com/about/tags/saml-0][here]]. But is this sufficient?
  This [[https://github.com/srinandan/rfc7522-saml-profile][repository]] is a custom implementation of RFC 7522.

  

  
* Angular and OAuth

  Implicit grant type
